AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys Spinnaker to an existing kubernetes cluster"

Parameters:
  EksClusterName:
    Type: String
  SpinnakerVersion:
    Type: String
    Default: '2.26.1'
  OperatorNamespace:
    Type: String
    Default: 'spinnaker-operator'
    Description: Kubernetes namespace to deploy Spinnaker operator.
  ServiceNamespace:
    Type: String
    Default: 'spinnaker-service'
    Description: Kubernetes namespace where the operator will deploy the service.
  GitHubUser:
    Type: String
    Description: GitHub username or organization
  GitHubTokenSecretsManager:
    NoEcho: true
    Type: String
    Default: '{{resolve:secretsmanager:/spinnaker/githubtoken:SecretString:GHToken}}'
    Description: GitHub Token. Must be defined in AWS Secrets Manager. https://github.com/settings/tokens
  ECRName:
    Type: String
    Default: 'spinnaker'
    Description: Name to be used for ECR repo.
  ServiceAccountName:
    Type: String
    Default: 'spinnaker-service-account'

#  CreateSpinnakerUser:
#    Type: String
#    Allowedvalues: ['Enabled','Disabled']
#    Default: 'Disabled'
#    Description: 'This is required to deploy Spinnaker but we default to disabled to force awareness of IAM user creation'

Mappings:
  Config:
    Prefix: { Value: 'eks-quickstart' }

#Depending on how you are using spinnaker this could be locked down to just s3 permissions.
Resources:
  SpinnakerUser:
    Type: AWS::IAM::User
    Description: User identity Spinnaker uses to manage AWS resources
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess

  SpinnakerAccessKey:
    DependsOn: SpinnakerUser
    Type: AWS::IAM::AccessKey
    Description: Generate AccessKey for Spinnaker
    Properties:
      UserName: !Ref SpinnakerUser

  SpinnakerAccessKeyCredentials:
    DependsOn: SpinnakerAccessKey
    Type: AWS::SecretsManager::Secret
    Description: Store the access key credentials for Spinnaker in a secure location
    Properties:
      Description: Spinnaker user access key credentials
      SecretString: !Sub |
        {
          "AccessKeyId":"${SpinnakerAccessKey}",
          "SecretAccessKey":"${SpinnakerAccessKey.SecretAccessKey}"
        }

  SpinnakerOperatorNamespace:
    Type: "AWSQS::Kubernetes::Resource"
    Properties:
      ClusterName: !Ref EksClusterName
      Namespace: ${OperatorNamespace}
      Manifest: !Sub |
        kind: Namespace
        apiVersion: v1
        metadata:
          name: ${OperatorNamespace}

  SpinnakerServiceNamespace:
    Type: "AWSQS::Kubernetes::Resource"
    Properties:
      ClusterName: !Ref EksClusterName
      Namespace: ${ServiceNamespace}
      Manifest: !Sub |
        kind: Namespace
        apiVersion: v1
        metadata:
          name: ${ServiceNamespace}

  SpinnakerServiceAccount:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: SpinnakerServiceNamespace
    Properties:
      ClusterName: !Ref EksClusterName
      Namespace: !Ref ServiceNamespace
      Manifest: !Sub |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: ${ServiceAccountName}
          namespace: ${ServiceNamespace}

  ServiceClusterRoleBinding:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: [SpinnakerServiceAccount, SpinnakerServiceNamespace]
    Properties:
      ClusterName: !Ref EksClusterName
      Namespace: !Ref ServiceNamespace
      Manifest: !Sub |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: spinnaker-admin
        subjects:
          - kind: ServiceAccount
            name: ${ServiceAccountName}
            namespace: ${ServiceNamespace}
        roleRef:
          kind: ClusterRole
          name: cluster-admin
          apiGroup: rbac.authorization.k8s.io

  ClusterEndpoint:
    Type: Custom::CliQuery
    Properties:
      ServiceToken: !Sub [ 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-ResourceReader', { Prefix: !FindInMap [ Config, Prefix, Value ] } ]
      AwsCliCommand: !Sub "eks describe-cluster --name ${EksClusterName} --query '{Endpoint: cluster.endpoint, CaData: cluster.certificateAuthority.data}'"
      IdField: 'Endpoint'

  KubeconfigCreator:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: [ServiceClusterRoleBinding, SpinnakerServiceAccount, ClusterEndpoint]
    Properties:
      ClusterName: !Ref EksClusterName
      Namespace: !Ref ServiceNamespace
      Manifest: !Sub |
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: spinnaker-config-generator
        spec:
          backoffLimit: 4
          template:
            spec:
              serviceAccountName: ${ServiceAccountName}
              containers:
              - name: spinnaker-config-generator
                image: widerin/eks-helmsman:latest
                command: ["/bin/bash","-c"]
                args:
                  - >
                    set -o errexit

                    secretName=$(kubectl --namespace ${ServiceNamespace} get serviceAccount ${ServiceAccountName} -o jsonpath='{.secrets[0].name}');
                    token=$(kubectl --namespace ${ServiceNamespace} get secret/$secretName -o jsonpath='{.data.token}' | base64 -d);

                    kubectl config set-cluster k8s --server=${ClusterEndpoint} \
                        --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                        --embed-certs=true;
                    kubectl config set-credentials spinnaker --token=$token;
                    kubectl config set-context k8s --cluster k8s --user spinnaker;
                    kubectl config use-context k8s;
                    kubectl config view --flatten > /tmp/config;
                    kubectl -n ${ServiceNamespace} create secret generic spin-kconfig \
                        --from-file=/tmp/config;
                    sleep 3s;
              restartPolicy: Never


  #Our token refresh sidecar will use instance credentials to update token for the Clouddriver container
  NodegroupECRTokenRefreshPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ecr-token-refresh-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource: "*"
      Roles:
        - !Sub [ '${Prefix}-ManagedNodeInstance', { Prefix: !FindInMap [ Config, Prefix, Value ] } ]
        - !Sub [ '${Prefix}-UnManagedNodeInstance', { Prefix: !FindInMap [ Config, Prefix, Value ] } ]

  SpinnakerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRName
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: 'AES256'
      ImageTagMutability: 'IMMUTABLE'

  SpinnakerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'spinnaker-bucket${AWS::Region}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


#Chart values are omitted as defaults are fine and meant to be production ready. Will use default values.yaml.
#View here --> https://artifacthub.io/packages/helm/armory/armory-spinnaker-operator
  SpinnakerOperatorHelmChart:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn: SpinnakerOperatorNamespace
    Properties:
      ClusterID: !Ref EksClusterName
      Namespace: !Ref OperatorNamespace
      Repository: 'https://armory.jfrog.io/artifactory/charts/'
      Chart: 'armory/armory-spinnaker-operator'


  TokenRefreshConfigmap:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: SpinnakerServiceNamespace
    Properties:
      ClusterName: !Ref EksClusterName
      Namespace: !Ref ServiceNamespace   #note that this namespace differs from the operator namespace. this is the service ns.
      Manifest: !Sub |
        apiVersion: v1
        data:
          config.yaml: |
            interval: 30m # defines refresh interval
            registries: # list of registries to refresh
              - registryId: "${AWS::AccountId}"
                region: "${AWS::Region}"
                passwordFile: "/etc/passwords/eks-registry.pass"
        kind: ConfigMap
        metadata:
          name: token-refresh-config
          namespace: ${ServiceNamespace}

  SpinnakerService:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn:
      - SpinnakerServiceNamespace
      - SpinnakerOperatorHelmChart
      - SpinnakerRepository
      - SpinnakerBucket
      - SpinnakerAccessKeyCredentials
      - TokenRefreshConfigmap
      - KubeconfigCreator
    Properties:
      ClusterName: !Ref EksClusterName
      Namespace: !Ref ServiceNamespace
      Manifest: !Sub |
        apiVersion: spinnaker.armory.io/v1alpha2
        kind: SpinnakerService
        metadata:
          name: spinnaker-test
        spec:
          spinnakerConfig:
            config:
              version: ${SpinnakerVersion}
              persistentStorage:
                persistentStoreType: s3
                s3:
                  bucket: spinnaker-bucket${AWS::Region}-${AWS::AccountId}
                  rootFolder: front50
                  region: ${AWS::Region}
                  accessKeyId: ${SpinnakerAccessKey}
                  secretAccessKey: ${SpinnakerAccessKey.SecretAccessKey}
                  serverSideEncryption: AES256
              deploymentEnvironment:
                sidecars:
                  spin-clouddriver:
                  - name: token-refresh
                    dockerImage: quay.io/skuid/ecr-token-refresh:latest
                    mountPath: /etc/passwords
                    configMapVolumeMounts:
                    - configMapName: token-refresh-config
                      mountPath: /opt/config/ecr-token-refresh
              features:
                artifacts: true
              artifacts:
                github:
                  enabled: true
                  accounts:
                  - name: ${GitHubUser}
                    token: ${GitHubTokenSecretsManager}
              providers:
                  dockerRegistry:
                    enabled: true
                  kubernetes:
                    enabled: true
                    accounts:
                    - name: ${EksClusterName}
                      requiredGroupMembership: []
                      providerVersion: V2
                      permissions:
                      dockerRegistries:
                        - accountName: eks-registry
                      configureImagePullSecrets: true
                      cacheThreads: 1
                      namespaces: []
                      omitNamespaces: []
                      kinds: []
                      omitKinds: []
                      customResources: []
                      cachingPolicies: []
                      oAuthScopes: []
                      onlySpinnakerManaged: false
                      kubeconfigFile: encryptedFile:k8s!n:spin-kconfig!k:config
                    primaryAccount: ${EksClusterName}
            profiles:
                clouddriver:
                  dockerRegistry:
                    enabled: true
                    primaryAccount: eks-registry
                    accounts:
                    - name: eks-registry
                      address: ${SpinnakerRepository.RepositoryUri}
                      username: AWS
                      passwordFile: /etc/passwords/eks-registry.pass
                      trackDigests: true
                      repositories:
                      - ${ECRName}
                igor:
                  docker-registry:
                    enabled: true
          expose:
            type: service
            service:
              type: LoadBalancer

